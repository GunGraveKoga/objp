#! /usr/bin/env python
# encoding: utf-8
# Chris Pickel, 2011

VERSION='0.0.1'
APPNAME='hello_world'

top = '.'
out = 'build'

def options(opt):
    opt.load('python')
    opt.load('compiler_c')

def configure(conf):
    conf.load('compiler_c')
    conf.load('python')
    conf.check_python_version((3,4))
    conf.check_python_headers()
    conf.env.append_value('FRAMEWORK_COCOA', 'Cocoa')

def build(bld):
    import objp.o2p
    import objp.p2o
    import simple
    objp.o2p.generate_objc_code(simple.Simple, 'autogen')
    objp.p2o.generate_python_proxy_code('ObjCHello.h', 'autogen/ObjCHello.m')
    bld(
        features = 'c cshlib pyext',
        source   = 'autogen/ObjCHello.m',
        target   = 'ObjCHello')
    
    bld.program(
        features      = 'c cprogram pyembed',
        target        = 'HelloWorld',
        source        = 'hello.m autogen/Simple.m autogen/ObjP.m ObjCHello.m',
        use           = 'COCOA',
        includes      = '. autogen',
    )
    bld(
        rule = 'cp ${SRC} ${TGT}',
        source = bld.path.make_node('simple.py'),
        target = bld.path.get_bld().make_node('simple.py'),
    )

from waflib import TaskGen
@TaskGen.extension('.m')
def m_hook(self, node):
    """Alias .m files to be compiled the same as .c files, gcc will do the right thing."""
    return self.create_compiled_task('c', node)

